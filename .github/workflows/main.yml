name: Build and Nightly Release Maven Project

on:
  push:
    branches:
      - master # Default branch

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Determine changed files
      - name: Check for significant changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            code:
              - 'src/**' # Detect changes in source files
              - 'pom.xml' # Detect changes in the Maven configuration
            docs:
              - 'README.md'
              - 'docs/**'

      # Step 3: Skip release for docs-only changes
      - name: Skip if only docs were changed
        if: ${{ steps.changes.outputs.docs == 'true' && steps.changes.outputs.code != 'true' }}
        run: echo "Docs-only change detected. Skipping release."

      # Step 4: Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 5: Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 6: Build the project
      - name: Build with Maven
        run: mvn clean package

      # Step 7: Create a nightly/beta release
      - name: Create Nightly/Beta Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: nightly-${{ github.run_id }}
          release_name: Nightly Build ${{ github.run_id }}
          body: |
            This is an automated nightly build triggered by the latest commit.
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 8: Upload JAR to the release
      - name: Upload JAR to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/*.jar
          asset_name: calculatorv2-nightly-${{ github.run_id }}.jar
          asset_content_type: application/java-archive
